[
 ;; workspace

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.workspace/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/unique :db.unique/value
  :db/doc "Der Name des Workspaces"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.workspace/rootNode
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "Die Root-Node des Workspaces"
  :db.install/_attribute :db.part/db}


 ;; node

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Der Name der Node"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/children
  :db/isComponent true
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "Die Child-Nodes der Node"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/properties
  :db/isComponent true
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "Die Properties der Node"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/position
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/one
  :db/doc "Die Position innerhalb der Children der Parent Node"
  :db.install/_attribute :db.part/db}

 ;; property

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Der Name der Property"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/type
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Der Typ der Property"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/values
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "Reference of the value"
  :db.install/_attribute :db.part/db}

 ;; value
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Values vom Typ NAME"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/string
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ STRING"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/binary
  :db/valueType :db.type/bytes
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ BINARY"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/long
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ LONG"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/double
  :db/valueType :db.type/double
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ DOUBLE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/date
  :db/valueType :db.type/instant
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ DATE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/boolean
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ BOOLEAN"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/reference
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ REFERENCE"
  :db.install/_attribute :db.part/db}

  ;; DB functions

 {:db/id #db/id[:db.part/user]
  :db/ident :append-position-in-scope
  :db/doc "Atomically adds to the end of a list of sorted cardinality/many lists"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr new-id pos-attr]
                 :code [[:db/add new-id pos-attr
                         (->>
                          ;; The full set of children
                          (scope-attr (datomic.api/entity db scope-id))
                          ;; Get only the numerical position attr
                          (map pos-attr)
                          ;; Get the highest one
                          (reduce max 0)
                          ;; And increment by one
                          (inc))]]}}
 
 
 {:db/id #db/id[:db.part/user]
  :db/ident :reset-position-in-scope
  :db/doc "Goes through existing positions and sequentializes them, assuming
          retracted-eid is being retracted from the list"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr retracted-eid sorted-attr]
                 :code (map-indexed
                        (fn [idx entity-id]
                          [:db/add entity-id sorted-attr idx])
                        (->>
                         ;; The full set of children
                         (scope-attr (datomic.api/entity db scope-id))
                         ;; Sort them by the numerical sorted-attr
                         (sort-by sorted-attr)
                         ;; Get the entity IDs
                         (map :db/id)
                         ;; Remove the retracted entity from the list
                         (filter (partial not= retracted-eid))))}}

 {:db/id #db/id[:db.part/user]
  :db/ident :set-position-in-scope
  :db/doc "Reposition consistently"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr sorted-eids sorted-attr]
                 :code (map-indexed
                        (fn [idx entity-id]
                          [:db/add entity-id sorted-attr idx])
                        (concat
                         sorted-eids
                         (clojure.set/difference
                          (map :db/id (scope-attr (datomic.api/entity db scope-id)))
                          sorted-eids)))}}
 ]
