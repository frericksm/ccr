[;; The content model of a jcr repository.
 ;; It consists of attributes for workspace, node, property and value
 
 ;; workspace

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.workspace/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/unique :db.unique/value
  :db/doc "The name of a workspace"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.workspace/rootNode
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "The root node of a workspace"
  :db.install/_attribute :db.part/db}


 ;; node

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "The name of a node"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/children
  ;:db/isComponent true
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "The child nodes of a node"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/properties
  :db/isComponent true
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "The properties of a node"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/position
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/one
  :db/doc "The position of a node in the sequence of the child nodes of the parent node"
  :db.install/_attribute :db.part/db}

 ;; property

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "The name of a property"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/type
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "The type of a property"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/value-attr
  :db/valueType :db.type/keyword 
  :db/cardinality :db.cardinality/one
  :db/doc "The name of the datomic attribute which contains the value of this property entitity"
  :db.install/_attribute :db.part/db}

 ;; value
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type NAME"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/names
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type NAME"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/path
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type PATH"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/paths
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type PATH"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/string
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type STRING"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/strings
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type STRING"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/binary
  :db/valueType :db.type/bytes
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type BINARY"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/binarys
  :db/valueType :db.type/bytes
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type BINARY"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/long
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type LONG"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/longs
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type LONG"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/double
  :db/valueType :db.type/double
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type DOUBLE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/doubles
  :db/valueType :db.type/double
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type DOUBLE"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/date
  :db/valueType :db.type/instant
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type DATE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/dates
  :db/valueType :db.type/instant
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type DATE"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/boolean
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type BOOLEAN"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/booleans
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type BOOLEAN"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/reference
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "Value of type REFERENCE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.value/references
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "Values of type REFERENCE"
  :db.install/_attribute :db.part/db}

 
  ;; DB functions

 {:db/id #db/id[:db.part/user]
  :db/ident :append-position-in-scope
  :db/doc "Atomically adds to the end of a list of sorted cardinality/many lists"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr new-id pos-attr]
                 :code [[:db/add new-id pos-attr
                         (as-> 
                          ;; The full set of children
                          (get (datomic.api/entity db scope-id) scope-attr) x
                          ;; Get only the numerical position attr
                          (map pos-attr x)
                          ;; Get the highest one
                          (reduce max 0 x)
                          ;; And increment by one
                          (inc x))]]}}
 
 
 {:db/id #db/id[:db.part/user]
  :db/ident :reset-position-in-scope
  :db/doc "Goes through existing positions and sequentializes them, assuming
          retracted-eid is being retracted from the list"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr retracted-eid sorted-attr]
                 :code (map-indexed
                        (fn [idx entity-id]
                          [:db/add entity-id sorted-attr idx])
                        (as->
                         ;; The full set of children
                         (get (datomic.api/entity db scope-id) scope-attr) x
                         ;; Sort them by the numerical sorted-attr
                         (sort-by sorted-attr x)
                         ;; Get the entity IDs
                         (map :db/id x)
                         ;; Remove the retracted entity from the list
                         (filter (partial not= retracted-eid)) x))}}

 {:db/id #db/id[:db.part/user]
  :db/ident :set-position-in-scope
  :db/doc "Reposition consistently"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr sorted-eids sorted-attr]
                 :code (map-indexed
                        (fn [idx entity-id]
                          [:db/add entity-id sorted-attr idx])
                        (concat
                         sorted-eids
                         (clojure.set/difference
                          (map :db/id (scope-attr (datomic.api/entity db scope-id)))
                          sorted-eids)))}}
 ]
