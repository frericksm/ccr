[
;; nodetype definition

 {:db/id #db/id[:db.part/db]

  {:db/id #db/id[:db.part/db]
   :db/ident :jcr.nodetype-definition/abstract
   :db/valueType :db.type/boolean
   :db/cardinality :db.cardinality/one
   :db/doc "True if this is an abstract node type; returns false otherwise."
   :db.install/_attribute :db.part/db}}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.nodetype-definition/mixin
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "True if this is a mixin type; returns false if it is primary."
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.nodetype-definition/queryable
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "True if the node type is queryable, meaning that the available-query-operators, full-text-searchable and query-orderable attributes of its property definitions take effect."
  :db.install/_attribute :db.part/db}

;; property definition

{:db/id #db/id[:db.part/db]
 :db/ident :jcr.property-definition/available-query-operators
 :db/valueType :db.type/string
 :db/cardinality :db.cardinality/many
 :db/doc "Returns the set of query comparison operators supported by this property."
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :jcr.property-definition/default-values
 :db/valueType :db.type/ref
 :db/cardinality :db.cardinality/many
 :db/doc "Gets the default value(s) of the property."
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :jcr.property-definition/type
 :db/valueType :db.type/ref
 :db/cardinality :db.cardinality/one
 :db/doc "Gets the required type of the property."
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :jcr.property-definition/multiple
 :db/valueType :db.type/boolean
 :db/cardinality :db.cardinality/one
 :db/doc "Reports whether this property can have multiple values."
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :jcr.property-definition/full-text-searchable
 :db/valueType :db.type/boolean
 :db/cardinality :db.cardinality/one
 :db/doc "Returns true if this property is full-text searchable, meaning that its value is accessible through the full-text search function within a query."
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
 :db/ident :jcr.property-definition/query-orderable
 :db/valueType :db.type/boolean
 :db/cardinality :db.cardinality/one
 :db/doc "Returns true if this property is query-orderable, meaning that query results may be ordered by this property using the order-by clause of a query."
 :db.install/_attribute :db.part/db}

;; node definition

{:db/id #db/id[:db.part/db]
  :db/ident :jcr.node-definition/allow-same-name-siblings
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "Reports whether this child node can have same-name siblings."
  :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
  :db/ident :jcr.node-definition/default-primary-type
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "The default primary node type that will be assigned to the child node if it is created without an explicitly specified primary node type."
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
  :db/ident :jcr.node-definition/required-primary-type
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "The default primary node type that will be assigned to the child node if it is created without an explicitly specified primary node type."
  :db.install/_attribute :db.part/db}


;; item (node and property) definition

{:db/id #db/id[:db.part/db]
  :db/ident :jcr.item-definition/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "The name of the child item. If \"*\", this ItemDefinition defines a residual set of child items. That is, it defines the characteristics of all those child items with names apart from the names explicitly used in other child item definitions."
 :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
  :db/ident :jcr.item-definition/auto-created
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "Reports whether the item is to be automatically created when its parent node is created"
  :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
  :db/ident :jcr.item-definition/mandantory
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "Reports whether the item is mandatory. A mandatory item is one that, if its parent node exists, must also exist."
  :db.install/_attribute :db.part/db}

{:db/id #db/id[:db.part/db]
  :db/ident :jcr.item-definition/protected
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "Reports whether the child item is protected. In level 2 implementations, a protected item is one that cannot be removed (except by removing its parent) or modified through the the standard write methods of this API"
 :db.install/_attribute :db.part/db}

;; workspace

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.workspace/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/unique :db.unique/value
  :db/doc "Der Name des Workspaces"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.workspace/rootNode
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "Die Root-Node des Workspaces"
  :db.install/_attribute :db.part/db}


 ;; node

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Der Name der Node"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/children
  :db/isComponent true
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "Die Child-Nodes der Node"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/properties
  :db/isComponent true
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "Die Properties der Node"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.node/position
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/one
  :db/doc "Die Position innerhalb der Children der Parent Node"
  :db.install/_attribute :db.part/db}

 ;; property

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/name
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Der Name der Property"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property/type
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Der Typ der Property"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.name/value
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ NAME"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.name/values
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ NAME"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.string/value
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ STRING"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.string/values
  :db/valueType :db.type/string
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ STRING"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.binary/value
  :db/valueType :db.type/bytes
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ BINARY"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.binary/values
  :db/valueType :db.type/bytes
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ BINARY"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.long/value
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ LONG"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.long/values
  :db/valueType :db.type/long
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ LONG"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.double/value
  :db/valueType :db.type/double
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ DOUBLE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.double/values
  :db/valueType :db.type/double
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ DOUBLE"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.date/value
  :db/valueType :db.type/instant
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ DATE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.date/values
  :db/valueType :db.type/instant
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ DATE"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.boolean/value
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ BOOLEAN"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.boolean/values
  :db/valueType :db.type/boolean
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ BOOLEAN"
  :db.install/_attribute :db.part/db}
 
 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.reference/value
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/one
  :db/doc "Value vom Typ REFERENCE"
  :db.install/_attribute :db.part/db}

 {:db/id #db/id[:db.part/db]
  :db/ident :jcr.property.reference/values
  :db/valueType :db.type/ref
  :db/cardinality :db.cardinality/many
  :db/doc "Values vom Typ REFERENCE"
  :db.install/_attribute :db.part/db}


 ;; DB functions

 {:db/id #db/id[:db.part/user]
  :db/ident :append-position-in-scope
  :db/doc "Atomically adds to the end of a list of sorted cardinality/many lists"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr new-id pos-attr]
                 :code [[:db/add new-id pos-attr
                         (->>
                          ;; The full set of children
                          (scope-attr (datomic.api/entity db scope-id))
                          ;; Get only the numerical position attr
                          (map pos-attr)
                          ;; Get the highest one
                          (reduce max 0)
                          ;; And increment by one
                          (inc))]]}}
 
 
 {:db/id #db/id[:db.part/user]
  :db/ident :reset-position-in-scope
  :db/doc "Goes through existing positions and sequentializes them, assuming
          retracted-eid is being retracted from the list"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr retracted-eid sorted-attr]
                 :code (map-indexed
                        (fn [idx entity-id]
                          [:db/add entity-id sorted-attr idx])
                        (->>
                         ;; The full set of children
                         (scope-attr (datomic.api/entity db scope-id))
                         ;; Sort them by the numerical sorted-attr
                         (sort-by sorted-attr)
                         ;; Get the entity IDs
                         (map :db/id)
                         ;; Remove the retracted entity from the list
                         (filter (partial not= retracted-eid))))}}

 {:db/id #db/id[:db.part/user]
  :db/ident :set-position-in-scope
  :db/doc "Reposition consistently"
  :db/fn #db/fn {:lang "clojure"
                 :params [db scope-id scope-attr sorted-eids sorted-attr]
                 :code (map-indexed
                        (fn [idx entity-id]
                          [:db/add entity-id sorted-attr idx])
                        (concat
                         sorted-eids
                         (clojure.set/difference
                          (map :db/id (scope-attr (datomic.api/entity db scope-id)))
                          sorted-eids)))}}
 ]
