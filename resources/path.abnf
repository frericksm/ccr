; https://docs.adobe.com/content/docs/en/spec/jcr/2.0/3_Repository_Model.html#3.4.3.3%20Lexical%20Path%20Grammar
; in ABNF https://tools.ietf.org/html/rfc2234

Path          =  AbsolutePath / RelativePath
AbsolutePath  = ("/" 0*1RelativePath) / ("[" Identifier "]" )
RelativePath  = 0*1[RelativePath <"/">] PathSegment [<"/">]
PathSegment   = (ExpandedName 0*1Index) / QualifiedName 0*1Index  / SelfOrParent
SelfOrParent  = Self  / Parent
Self          = "."
Parent        = ".."
Index         = "[" Number "]"
Identifier    = *(DIGIT / HEXDIG/ "-" )                                       ; See §3.3 Identifiers 
Number        =  1*("1"/ "2"/ "3" / "4" / "5"/  "6"/ "7" / "8" / "9")  *DIGIT ; An integer > 0 
ExpandedName  =  '{' Namespace '}' LocalName                                  ; See §3.2.5.1 Expanded Form 
QualifiedName = *[Prefix ':'] LocalName                                       ; See §3.2.5.2 Qualified Form 
Namespace     = EmptyString / URI                                             ; see §3.2.1 Namespaces 
EmptyString   =   ""
Prefix        = NCName                                                        ; Any string that matches the NCName production in http://www.w3.org/TR/REC-xml-names
NCName        =  Name                       	                              ; An XML Name, minus the ":"
NameStartChar = ":" / ALPHA / "_" / #"[\u00c0-\u00d6]" / #"[\u00d8-\u00f6]" / #"[\u00f8-\u02ff]" / #"[\u0370-\u037d]" / #"[\u037f-\u1fff]"  / #"[\u200c-\u200d]" / #"[\u2070-\u218f]" / #"[\u2c00-\u2fef]" / #"[\u3001-\ud7ff]" / #"[\uf900-\ufdcf]" / #"[\ufdf0-\ufffd]" 
NameChar =    	NameStartChar /  "-" /  "." /  DIGIT  /  #"\u00b7" / #"[\u0300-\u036f]" / #"[\u203f-\u2040]"
Name	 =    	NameStartChar *NameChar



LocalName     = 1*ValidChar                                                   ; see §3.2.2 Local Names 
ValidChar     = ALPHA / #"\u0009|\u000a|\u000d|[\u0020-\ud7ff\ue000-\uffff&&[^/:\[\]\|\*]]"

                                                                              ;InvalidChar = 	    #"[/:\[\]\|\*]" 
URI           = scheme ":" hier-part [ "?" query ] [ "#" fragment ] ; https://tools.ietf.org/html/rfc3986#section-3
   hier-part  = "//" authority path-abempty / path-absolute / path-rootless / path-empty
   URI-reference = URI / relative-ref
   absolute-URI  = scheme ":" hier-part [ "?" query ]
   relative-ref  = relative-part [ "?" query ] [ "#" fragment ]
   relative-part = "//" authority path-abempty
                 / path-absolute
                 / path-noscheme
                 / path-empty

   scheme        = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

   authority     = [ userinfo "@" ] host [ ":" port ]
   userinfo      = *( unreserved / pct-encoded / sub-delims / ":" )
   host          = IP-literal / IPv4address / reg-name
   port          = *DIGIT

   IP-literal    = "[" ( IPv6address / IPvFuture  ) "]"

   IPvFuture     = "v" 1*HEXDIG "." 1*( unreserved / sub-delims / ":" )

   IPv6address   =                            6( h16 ":" ) ls32
                 /                       "::" 5( h16 ":" ) ls32
                 / [               h16 ] "::" 4( h16 ":" ) ls32
                 / [ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
                 / [ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
                 / [ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
                 / [ *4( h16 ":" ) h16 ] "::"              ls32
                 / [ *5( h16 ":" ) h16 ] "::"              h16
                 / [ *6( h16 ":" ) h16 ] "::"

   h16           = 1*4HEXDIG
   ls32          = ( h16 ":" h16 ) / IPv4address
   IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet
dec-octet     = DIGIT                 ; 0-9
                 / %x31-39 DIGIT         ; 10-99
                 / "1" 2DIGIT            ; 100-199
                 / "2" %x30-34 DIGIT     ; 200-249
                 / "25" %x30-35          ; 250-255

   reg-name      = *( unreserved / pct-encoded / sub-delims )

   path          = path-abempty    ; begins with "/" or is empty
                 / path-absolute   ; begins with "/" but not "//"
                 / path-noscheme   ; begins with a non-colon segment
                 / path-rootless   ; begins with a segment
                 / path-empty      ; zero characters

   path-abempty  = *( "/" segment )
   path-absolute = "/" [ segment-nz *( "/" segment ) ]
   path-noscheme = segment-nz-nc *( "/" segment )
   path-rootless = segment-nz *( "/" segment )
   path-empty    = 0<pchar>

   segment       = *pchar
   segment-nz    = 1*pchar
   segment-nz-nc = 1*( unreserved / pct-encoded / sub-delims / "@" )
                 ; non-zero-length segment without any colon ":"

   pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"

   query         = *( pchar / "/" / "?" )

   fragment      = *( pchar / "/" / "?" )

   pct-encoded   = "%" HEXDIG HEXDIG

   unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
   reserved      = gen-delims / sub-delims
   gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
   sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
                 / "*" / "+" / "," / ";" / "="